// Generated by CoffeeScript 1.10.0
var Game, ItemState, product;

product = function(list) {
  var el, l, len, o;
  o = 1;
  for (l = 0, len = list.length; l < len; l++) {
    el = list[l];
    o *= el;
  }
  return o;
};

ItemState = (function() {
  function ItemState(game1, type) {
    this.game = game1;
    this.type = items[type];
    if (this.type.interval === null) {
      this.update = function() {
        return 0;
      };
    }
    this.n_items = 0;
    this.upgrades = [];
    this.s_left = Infinity;
  }

  ItemState.prototype.load = function(save) {
    this.upgrades = this.type.upgrades.slice(0, save.upgrades);
    this.n_items = save.number;
    return this.s_left = this.calc_interval();
  };

  ItemState.prototype.save = function() {
    if (this.n_items) {
      return {
        number: this.n_items,
        upgrades: this.upgrades.length
      };
    }
  };

  ItemState.prototype.calc_price = function() {
    var extra, pm, pmg;
    pm = this.type.price_mult;
    if (this.n_items < 10) {
      pm *= 1;
    } else if (this.n_items < 50) {
      pm *= 1.2;
    } else if (this.n_items < 100) {
      pm *= 1.4;
    } else if (this.n_items < 500) {
      pm *= 1.6;
    } else if (this.n_items < 1000) {
      pm *= 3.3;
    } else if (this.n_items < 6000) {
      pm *= 6.5;
    }
    pmg = this.type.margin_price;
    if (this.n_items > 400) {
      if (pmg === 1) {
        pmg = 50;
      }
      if (pmg === 5) {
        pmg = 75;
      }
    } else if (this.n_items > 500) {
      0;
    }
    extra = pmg * this.n_items * pm;
    return this.type.base_price + extra;
  };

  ItemState.prototype.calc_output = function() {
    var x;
    return this.n_items * this.type.output * product((function() {
      var l, len, ref, results;
      ref = this.upgrades;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        x = ref[l];
        results.push(x.o_factor);
      }
      return results;
    }).call(this));
  };

  ItemState.prototype.calc_interval = function() {
    var x;
    if (this.type.interval === null) {
      return Infinity;
    }
    return this.type.interval * product((function() {
      var l, len, ref, results;
      ref = this.upgrades;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        x = ref[l];
        results.push(x.i_factor);
      }
      return results;
    }).call(this));
  };

  ItemState.prototype.buy = function(n) {
    if (n == null) {
      n = 1;
    }
    if (this.game.cupcakes < this.calc_price() * n) {
      return false;
    }
    this.game.cupcakes -= this.calc_price() * n;
    this.n_items += n;
    this.game.interrupt_tick();
    return true;
  };

  ItemState.prototype.update = function(elapsed) {
    this.s_left -= elapsed;
    if (this.s_left <= 0) {
      this.s_left += this.calc_interval();
      return this.calc_output();
    }
    return 0;
  };

  return ItemState;

})();

Game = (function() {
  function Game() {
    this.items = {};
    this.cupcakes = 0;
    this.cc = $('cimage');
    this.cn = $('cupcake_number');
    this.cc.addEventListener('click', this.click.bind(this));
    this.load({
      cupcakes: 0,
      items: {}
    });
    this.last_tick = void 0;
    this.last_interval = void 0;
    this.loop(0);
  }

  Game.prototype.click = function() {
    this.cupcakes += this.items.helpers.calc_output() + 1;
    return this.interrupt_tick();
  };

  Game.prototype.tick = function(elapsed) {
    var _, i, x;
    x = (function() {
      var ref, results;
      ref = this.items;
      results = [];
      for (_ in ref) {
        i = ref[_];
        this.cupcakes += i.update(elapsed);
        results.push(i.s_left);
      }
      return results;
    }).call(this);
    this.cn.textContent = (Math.round(this.cupcakes)) + " Cupcakes";
    return Math.min.apply(Math, x);
  };

  Game.prototype.loop = function(elapsed) {
    var t;
    t = this.tick(elapsed);
    this.last_tick = window.performance.now();
    if (t !== Infinity) {
      return this.last_interval = setTimeout(((function(_this) {
        return function() {
          return _this.loop(t);
        };
      })(this)), t * 1000);
    }
  };

  Game.prototype.interrupt_tick = function() {
    clearTimeout(this.last_interval);
    return this.loop((window.performance.now() - this.last_tick) / 1000);
  };

  Game.prototype.load = function(save) {
    var i, l, len;
    clearTimeout(this.last_interval);
    this.cupcakes = save.cupcakes;
    for (l = 0, len = order.length; l < len; l++) {
      i = order[l];
      this.items[i] = new ItemState(this, i);
      if (save.items[i] != null) {
        this.items[i].load(save.items[i]);
      }
    }
    this.loop(0);
  };

  Game.prototype.save = function() {
    var k, o, ref, t, v;
    o = {
      cupcakes: this.cupcakes,
      items: {}
    };
    ref = this.items;
    for (k in ref) {
      v = ref[k];
      t = v.save();
      if (t) {
        o.items[k] = t;
      }
    }
    return o;
  };

  Game.prototype.prompt_load = function() {
    return $('savepicker').click();
  };

  return Game;

})();

document.addEventListener('DOMContentLoaded', function() {
  var ch, fn, i, l, len, picker, q, results, toggles, x;
  window.game = new Game();
  picker = $('savepicker');
  picker.addEventListener('change', function() {
    var blob, fileReader;
    if (picker.files[0] != null) {
      blob = picker.files[0];
      fileReader = new FileReader();
      fileReader.addEventListener('load', function() {
        var buf, u8a;
        picker.value = '';
        buf = this.result;
        u8a = new Uint8Array(buf);
        game.load(convert_save(decodeLSO(u8a)));
        return console.log('Loaded ccSave.sol');
      });
      return fileReader.readAsArrayBuffer(blob);
    }
  });
  ch = $('tabs').children;
  toggles = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = ch.length; l < len; l++) {
      x = ch[l];
      results.push($(x.getAttribute('data-toggle')));
    }
    return results;
  })();
  fn = function(q, i) {
    return i.addEventListener('click', function() {
      var j, len1, len2, m, p;
      for (m = 0, len1 = toggles.length; m < len1; m++) {
        j = toggles[m];
        if (j !== q) {
          j.style.display = "none";
        }
      }
      q.style.display = "";
      for (p = 0, len2 = ch.length; p < len2; p++) {
        j = ch[p];
        if (j !== i) {
          j.classList.remove('active');
        }
      }
      return i.classList.add('active');
    });
  };
  results = [];
  for (l = 0, len = ch.length; l < len; l++) {
    i = ch[l];
    q = $(i.getAttribute('data-toggle'));
    fn(q, i);
    continue;
  }
  return results;
});
