// Generated by CoffeeScript 1.10.0
(function() {
  var ProxyError,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ProxyError = (function(superClass) {
    extend(ProxyError, superClass);

    function ProxyError() {
      return ProxyError.__super__.constructor.apply(this, arguments);
    }

    return ProxyError;

  })(TypeError);

  window.hide_pr = function(obj) {
    return new Proxy(obj, {
      ownKeys: function(obj) {
        var i, len, ref, results, x;
        ref = Object.getOwnPropertyNames(obj);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x !== '_proxy') {
            results.push(x);
          }
        }
        return results;
      }
    });
  };

  window.deep_merge = function(first, second) {
    var pcs;
    pcs = {};
    return new Proxy(first, {
      get: function(first, name) {
        var a, b, q;
        a = first[name];
        b = second[name];
        if (typeof a === "object") {
          if (typeof b === "object") {
            q = pcs[name];
            if ((q == null) || q.f !== a || q.s !== b) {
              q = {
                f: a,
                s: b,
                v: deep_merge(a, b)
              };
              pcs[name] = q;
            }
            return q.v;
          }
          return a;
        }
        return a != null ? a : b;
      },
      ownKeys: function(first) {
        var i, j, k, len, len1, ref, ref1, results, x;
        k = {};
        ref = Object.getOwnPropertyNames(first);
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          k[x] = true;
        }
        ref1 = Object.getOwnPropertyNames(second);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          x = ref1[j];
          k[x] = true;
        }
        results = [];
        for (k in k) {
          results.push(k);
        }
        return results;
      }
    });
  };

  window.proxy_object = function(obj, pro) {
    var is_accessible, is_unfiltered, is_writeable, new_call, pcs, pr, ref;
    pcs = {};
    pro = (ref = pro != null ? pro : obj._proxy) != null ? ref : {
      blacklist: true
    };
    new_call = function() {
      var args, class_;
      class_ = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return new Function.prototype.bind.apply(class_, args);
    };
    is_accessible = function(name) {
      return pro.blacklist ^ (pro.accessible && pro.accessible[name]);
    };
    is_unfiltered = function(name) {
      return pro.unfiltered && pro.unfiltered[name];
    };
    is_writeable = function(name) {
      return pro.readwrite ^ (pro.writeable && pro.writeable[name]);
    };
    return pr = new Proxy(obj, {
      get: function(obj, name) {
        var pc, t, v;
        if (name === '__proto__') {
          return Object.getPrototypeOf(pr);
        }
        if (is_accessible(name)) {
          if (is_unfiltered(name)) {
            return obj[name];
          }
          v = obj[name];
          t = typeof v;
          if (t === "function" || t === "object") {
            pc = pcs[name];
            if (pc == null) {
              pc = pcs[name] = {};
            }
            if (pc.o === v) {
              return pc.p;
            }
            pc.o = v;
            if (t === "object") {
              return pc.p = proxy_object(v);
            }
            if (t === "function") {
              return pc.p = new Proxy(v, {
                apply: function(v, this_, args) {
                  if (this_ === pr) {
                    return v.apply(obj, args);
                  }
                  return v.apply(this_, args);
                }
              });
            }
          }
          return v;
        }
        throw new ProxyError("Tried to read non-accessible property");
      },
      set: function(obj, name, val) {
        if (name === '__proto__') {
          Object.setPrototypeOf(pr, val);
          return;
        }
        if (is_writeable(name)) {
          obj[name] = val;
          return;
        }
        throw new ProxyError("Tried to write non-writeable property");
      },
      has: function(obj, name) {
        return name in obj && (pro.accessible[name] != null);
      },
      ownKeys: function(obj) {
        var i, len, ref1, results, x;
        ref1 = Object.getOwnPropertyNames(obj);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          x = ref1[i];
          if (is_accessible(x)) {
            results.push(x);
          }
        }
        return results;
      },
      apply: function(obj, this_, args) {
        if ((pro.special != null) && pro.special.callable) {
          return pro.apply(this_, args);
        }
        throw new ProxyError("Tried to call non-callable object");
      },
      construct: function(obj, this_, args) {
        if ((pro.special != null) && pro.special.constructable) {
          return new_call.apply(null, [this_].concat(slice.call(args)));
        }
        throw new ProxyError("Tried to construct non-constructable object");
      },
      deleteProperty: function(obj, name) {
        if (is_writeable(name)) {
          delete obj[name];
        }
        throw new ProxyError("Tried to delete non-deleteable property");
      },
      preventExtensions: function(obj) {
        if (pro.special.can_prevent_extension) {
          Object.preventExtensions(obj);
        }
        throw new ProxyError("Tried to prevent extensions when not allowed");
      },
      setPrototypeOf: function(obj, val) {
        if (is_accessible('__proto__')) {
          Object.setPrototypeOf(obj, val);
        }
        throw new ProxyError("Tried to set prototype when not allowed");
      },
      getPrototypeOf: function(obj) {
        if (is_writeable('__proto__')) {
          throw new ProxyError("Tried get prototype when not allowed");
        }
        if ((pro.special != null) && pro.special.hasOwnProperty('override_prototype')) {
          return pro.special.override_prototype;
        }
        return Object.getPrototypeOf(obj);
      }
    });
  };

}).call(this);
